#include "shell.hpp"
#include <iostream>
#include <ostream>
#include <string>
#include <sys/ioctl.h>
#include <stdio.h>
#include <unistd.h>
#include <unistd.h>
#include <regex>

void Shell::setScreenStats(){
	struct winsize w;
	ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);
  // printf ("lines %d\n", w.ws_row);
  // printf ("columns %d\n", w.ws_col);
	screen_height = w.ws_row;
	screen_width = w.ws_col;
}

void Shell::setPrompt(std::string sprompt){
      prompt = sprompt;
}
int Shell::getScreen_width(){
      return screen_width;
    }

int Shell::getScreen_height(){
      return screen_height;
    }

std::string Shell::shellPrompt(std::string t){
    std::string temp;
    std::cout << t << std::endl;
    std::cout << prompt;
    std::cin >> temp;
    return temp;
}

bool Shell::isSystemCommand(std::string t){
  std::regex sysreg("\\![a-zA-Z0-9]+");
  if (std::regex_match(t,sysreg)) {
    return true;
  }
  return false;
}
void Shell::runSystemCommand(std::string cmd){

  std::system(cmd.c_str());
}

void Shell::runPDeskCommand(std::string cmd){


  //TODO
  std::cout << "Imagine the system doing your command" << std::endl;
}

void Shell::runCommand(std::string cmd){

  if (Shell::isSystemCommand(cmd)) {
    Shell::runSystemCommand(cmd.erase(0,1));
  } else {
    Shell::runPDeskCommand(cmd);
  }

}
